plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.rex'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    proguard
}

dependencies {
    proguard 'net.sf.proguard:proguard-base:7.2.2'
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveClassifier.set('')
    destinationDirectory.set(file("$buildDir/libs"))
    mergeServiceFiles()
}

task obfuscate(type: JavaExec) {
    group = 'build'
    description = 'Runs ProGuard obfuscation'
    classpath = configurations.proguard
    main = 'proguard.ProGuard'

    args = [
            '@proguard.pro'
    ]
}

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

/*processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Or WARN if preferred
    from(sourceSets.main.resources.srcDirs) {
        // Replace placeholders in plugin.yml if needed (e.g., version)
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version])
    }
}*/

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
